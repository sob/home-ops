---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/refs/heads/main/helmrelease-helm-v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: authentik
  namespace: security
spec:
  interval: 30m
  chart:
    spec:
      chart: authentik
      version: 2025.6.4
      sourceRef:
        kind: HelmRepository
        name: authentik
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    global:
      podAnnotations:
        secret.reloader.stakater.com/reload: authentik
      deploymentStrategy:
        type: RollingUpdate
      envFrom:
        - secretRef:
            name: authentik
    authentik:
      # Disable the creation of the default secret since we're using an external secret
      enabled: false
      redis:
        host: dragonfly.database.svc.cluster.local
      log_level: trace
    postgresql:
      enabled: true
      auth:
        existingSecret: authentik
        secretKeys:
          userPasswordKey: AUTHENTIK_POSTGRESQL__PASSWORD
          usernameKey: AUTHENTIK_POSTGRESQL__USER
          databaseKey: AUTHENTIK_POSTGRESQL__NAME
      primary:
        persistence:
          enabled: true
          storageClass: ceph-block
          size: 10Gi
        # Important: Enable PostgreSQL WAL archiving for consistent backups
        extraEnvVars:
          - name: POSTGRESQL_WAL_LEVEL
            value: "replica"
          - name: POSTGRESQL_ARCHIVE_MODE
            value: "on"
        # Add pod disruption budget to prevent data loss
        podDisruptionBudget:
          enabled: true
          minAvailable: 1
    server:
      autoscaling:
        enabled: true
        minReplicas: 2
      metrics:
        prometheus:
          serviceMonitor:
            enabled: true
            labels:
              prometheus.io/forward: "true"
      ingress:
        enabled: false
      initContainers:
        - name: wait-for-postgresql
          image: docker.io/library/postgres:17-alpine
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - |
              until pg_isready -h authentik-postgresql -p 5432 -U authentik; do
                echo "Waiting for PostgreSQL..."
                sleep 2
              done
              echo "PostgreSQL is ready!"
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: authentik
                  key: AUTHENTIK_POSTGRESQL__PASSWORD
    worker:
      autoscaling:
        enabled: true
        minReplicas: 2
      initContainers:
        - name: wait-for-postgresql
          image: docker.io/library/postgres:17-alpine
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - |
              until pg_isready -h authentik-postgresql -p 5432 -U authentik; do
                echo "Waiting for PostgreSQL..."
                sleep 2
              done
              echo "PostgreSQL is ready!"
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: authentik
                  key: AUTHENTIK_POSTGRESQL__PASSWORD
