---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/refs/heads/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app sonarr
spec:
  chartRef:
    kind: OCIRepository
    name: sonarr
  interval: 30m
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      main:
        enabled: true
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/home-operations/sonarr
              tag: 4.0.14.2938@sha256:5126f7ae94745a8e58e6963e1f67e905766c096832eff08b0678355ad0cdecee
            env:
              SONARR__APP__INSTANCENAME: Sonarr
              SONARR__APP__THEME: dark
              SONARR__LOG__DBENABLED: "False"
              SONARR__LOG__LEVEL: debug
              SONARR__SERVER__PORT: &port 80
              SONARR__UPDATE__BRANCH: develop
              SONARR__APPLICATION_URL: https://sonarr.${SECRET_DOMAIN}
              TZ: America/Chicago
            envFrom: &envFrom
              - secretRef:
                  name: sonarr-secret
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
                memory: 219Mi
              limits:
                memory: 2Gi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1029
        runAsGroup: 65536
        fsGroup: 65536
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [100]
        seccompProfile: { type: RuntimeDefault }
      tolerations:
        - key: "workload-type"
          operator: "Equal"
          value: "media"
          effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/media
                    operator: In
                    values:
                      - "true"
    service:
      app:
        controller: main
        ports:
          http:
            port: *port
    serviceMonitor:
      app:
        serviceName: main
        labels:
          prometheus.io/forward: "true"
        endpoints:
          - port: http
    ingress:
      app:
        annotations:
          external-dns.alpha.kubernetes.io/target: internal.${SECRET_DOMAIN}
          authentik.home.arpa/internal: "true"
        className: internal
        hosts:
          - host: "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
    persistence:
      config:
        existingClaim: *app
      tmp:
        type: emptyDir
      media:
        type: custom
        volumeSpec:
          nfs:
            server: ${SECRET_NFS_SERVER}
            path: ${SECRET_NFS_PATH_MEDIA}
            mountOptions:
              - nfsvers=4.1
              - hard
              - noatime
              - rsize=131072
              - wsize=131072
        globalMounts:
          - path: /media
          - path: /Downloads
