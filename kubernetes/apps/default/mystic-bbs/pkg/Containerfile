# Build stage for cryptlib compilation
FROM ubuntu:24.04@sha256:b359f1067efa76f37863778f7b6d0e8d911e3ee8efa807ad01fbf5dc1ef9006b AS builder

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc-9 \
    g++-9 \
    git \
    libbz2-dev \
    libffi-dev \
    liblzma-dev \
    libncurses5-dev \
    libncursesw5-dev \
    libreadline-dev \
    libsqlite3-dev \
    libssl-dev \
    llvm \
    make \
    python3-openssl \
    tk-dev \
    unzip \
    wget \
    xz-utils \
    zlib1g-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install pyenv and Python 2.7.18
RUN git clone --depth=1 --branch=v2.4.18 https://github.com/pyenv/pyenv.git /opt/pyenv
ENV PATH="/opt/pyenv/bin:$PATH"
RUN eval "$(pyenv init -)" && pyenv install 2.7.18 && pyenv global 2.7.18

# Build cryptlib for Mystic BBS SSH support
WORKDIR /tmp
RUN wget -q http://www.mysticbbs.com/downloads/cl345.zip \
    && mkdir cryptlib \
    && cd cryptlib \
    && unzip -a ../cl345.zip \
    && CC=gcc-9 CXX=g++-9 CFLAGS="-c -D__UNIX__ -DNDEBUG -I. -DDATA_LITTLEENDIAN -DFIXED_SEED=0x9387c06a95e93f30 -DHAS_ZLIB -fPIC -DHAS_RECURSIVE_MUTEX -DHAS_ROBUST_MUTEX -march=x86-64 -DOSVERSION=6 -O3 -fomit-frame-pointer -D_REENTRANT" make shared \
    && mkdir -p /build \
    && cp libcl.so.3.4.5 /build/ \
    && cd / \
    && rm -rf /tmp/cryptlib /tmp/cl345.zip

# Download and install Mystic BBS (architecture-specific)
WORKDIR /tmp
RUN ARCH=$(uname -m) && \
    echo "Detected architecture: $ARCH" && \
    if [ "$ARCH" = "x86_64" ]; then \
        MYSTIC_URL="https://www.mysticbbs.com/downloads/mys112a48_l64.rar"; \
        MYSTIC_FILE="mys112a48_l64.rar"; \
        apt-get update && apt-get install -y unrar && apt-get clean && rm -rf /var/lib/apt/lists/*; \
    elif [ "$ARCH" = "aarch64" ]; then \
        MYSTIC_URL="https://www.mysticbbs.com/downloads/mys112a48_p64.zip"; \
        MYSTIC_FILE="mys112a48_p64.zip"; \
    elif [ "$ARCH" = "armv7l" ] || [ "$ARCH" = "arm" ]; then \
        MYSTIC_URL="https://www.mysticbbs.com/downloads/mys112a48_p32.zip"; \
        MYSTIC_FILE="mys112a48_p32.zip"; \
    else \
        echo "Unsupported architecture: $ARCH"; \
        exit 1; \
    fi && \
    echo "Downloading Mystic BBS for $ARCH from $MYSTIC_URL" && \
    wget -q "$MYSTIC_URL" -O "$MYSTIC_FILE" && \
    if [ "${MYSTIC_FILE##*.}" = "rar" ]; then \
        unrar x "$MYSTIC_FILE"; \
    else \
        unzip -q "$MYSTIC_FILE"; \
    fi && \
    chmod +x install && \
    ./install auto /build/mystic && \
    chmod +x /build/mystic/mis && \
    chmod +x /build/mystic/*.sh 2>/dev/null || true && \
    rm -rf /tmp/"$MYSTIC_FILE" /tmp/install*

# Runtime stage
FROM ubuntu:24.04@sha256:b359f1067efa76f37863778f7b6d0e8d911e3ee8efa807ad01fbf5dc1ef9006b

# Metadata
LABEL org.opencontainers.image.title="Mystic BBS"
LABEL org.opencontainers.image.description="Mystic BBS running in a container with SSH access and FidoNet BinkP support"
LABEL org.opencontainers.image.source="https://github.com/seobrien/home-ops"
LABEL org.opencontainers.image.licenses="MIT"

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Chicago
ENV PYTHONPATH="/opt/pyenv/versions/2.7.18/lib/python2.7:/opt/pyenv/versions/2.7.18/lib/python2.7/lib-dynload"
ENV PATH="/opt/pyenv/versions/2.7.18/bin:$PATH"

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    cron \
    expect \
    logrotate \
    zip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy Python from builder
COPY --from=builder /opt/pyenv /opt/pyenv

# Copy cryptlib from builder
COPY --from=builder /build/libcl.so.3.4.5 /usr/lib/libcl.so
RUN ldconfig

# Copy Mystic BBS from builder
COPY --from=builder /build/mystic /opt/mystic

# Setup logrotate
COPY logrotate.conf /etc/logrotate.d/mystic

# Create mystic user and directories (no passwords)
RUN useradd -m -s /bin/bash mystic \
    && mkdir -p /mystic

# Copy startup scripts
COPY boot.sh /mystic/
COPY tailit.sh /mystic/
RUN chmod +x /mystic/boot.sh /mystic/tailit.sh

# Expose ports (telnet, SSH, BinkP for FidoNet)
EXPOSE 23/tcp 22/tcp 24554/tcp

WORKDIR /mystic

CMD ["/mystic/boot.sh"]