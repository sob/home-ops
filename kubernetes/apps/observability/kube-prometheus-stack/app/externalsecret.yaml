---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/external-secrets.io/externalsecret_v1beta1.json
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: alertmanager
spec:
  refreshInterval: 5m
  secretStoreRef:
    kind: ClusterSecretStore
    name: onepassword-connect
  target:
    name: alertmanager-secret
    template:
      engineVersion: v2
      data:
        # Yo dawg I heard you like go templating so I put go templates in your go templates
        alertmanager.yaml: |
          global:
            resolve_timeout: 5m
            smtp_from: alert@stonehedges.net
            smtp_smarthost: "{{ .SMTP_RELAY_SERVER }}:587"
            smtp_require_tls: false
            slack_api_url: "{{ .ALERTMANAGER_SLACK_URL }}"
          route:
            group_by: ["alertname", "job"]
            group_interval: 10m
            group_wait: 1m
            receiver: slack
            repeat_interval: 12h
            routes:
              - receiver: heartbeat
                group_interval: 5m
                group_wait: 0s
                matchers:
                  - alertname =~ "Watchdog"
                repeat_interval: 5m
              - receiver: "null"
                matchers:
                  - alertname =~ "InfoInhibitor"
              - receiver: slack
                continue: true
                matchers:
                  - severity: "critical"
          inhibit_rules:
            - equal: ["alertname", "namespace"]
              source_matchers:
                - severity = "critical"
              target_matchers:
                - severity = "warning"
          receivers:
            - name: heartbeat
              webhook_configs:
                - send_resolved: true
                  url: "{{ .ALERTMANAGER_CLUSTER_MAIN_HEARTBEAT_URL }}"
            - name: "null"
            - name: slack
              slack_configs:
                - send_resolved: true
                  channel: #observability
                  title: |-
                    [{{ "{{" }} .Status | toUpper {{ "}}" }}{{ "{{" }} if eq .Status "firing" {{ "}}" }}:{{ "{{" }} .Alerts.Firing | len {{ "}}" }}{{ "{{" }} end {{ "}}" }}] {{ "{{" }} .CommonLabels.alertname {{ "}}" }} for {{ "{{" }} .CommonLabels.job {{ "}}" }}
                    {{ "{{-" }} if gt (len .CommonLabels) (len .GroupLabels) {{ "-}}" }}
                      {{ "{{" }}" "}}(
                      {{ "{{-" }} with .CommonLabels.Remove .GroupLabels.Names {{ "}}" }}
                        {{ "{{-" }} range $index, $label := .SortedPairs {{ "-}}" }}
                          {{ "{{" }} if $index }}, {{ "{{" }} end {{ "}}" }}
                          {{ "{{-" }} $label.Name {{ "}}" }}="{{ "{{" }} $label.Value {{ "-}}" }}"
                        {{ "{{-" }} end {{ "}}" }}
                      {{ "{{-" }} end {{ "-}}" }}
                      )
                    {{ "{{-" }} end {{ "}}" }}
                  text: >-
                    {{ "{{" }} range .Alerts {{ "-}}" }}
                      *Alert:* {{ "{{" }} .Annotations.title {{ "}}" }}{{ "{{" }} if .Labels.severity {{ "}}" }} - `{{ "{{" }} .Labels.severity {{ "}}" }}`{{ "{{" }} end {{ "}}" }}

                      *Description:* {{ "{{" }} .Annotations.description {{ "}}" }}

                      *Details:*
                      {{ "{{" }} range .Labels.SortedPairs {{ "}}" }} â€¢ *{{ "{{" }} .Name {{ "}}" }}:* `{{ "{{" }} .Value {{ "}}" }}`{{ "{{" }} end {{ "}}" }}
                    {{ "{{" }} end {{ "}}" }}
  dataFrom:
    - extract:
        key: alertmanager
    - extract:
        key: smtp-relay
