---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: observability
data:
  config.alloy: |
    // Prometheus remote write to Grafana Cloud
    prometheus.remote_write "grafana_cloud" {
      endpoint {
        url = sys.env("GRAFANA_CLOUD_METRICS_URL")
        
        basic_auth {
          username = sys.env("GRAFANA_CLOUD_METRICS_ID")
          password = sys.env("GRAFANA_CLOUD_API_KEY")
        }
        
        write_relabel_config {
          // Drop high cardinality labels (but NOT __name__)
          regex = "(container_id|pod_ip|uid|id|image_id)"
          action = "labeldrop"
        }
      }
    }
    
    // Scrape infrastructure metrics (node-exporter and kube-state-metrics)
    prometheus.operator.servicemonitors "infrastructure_metrics" {
      forward_to = [prometheus.relabel.infrastructure_metrics.receiver]
      
      // Only scrape infrastructure monitoring
      namespaces = ["observability"]
      
      selector {
        match_expression {
          key = "app.kubernetes.io/name"
          operator = "In"
          values = ["prometheus-node-exporter", "kube-state-metrics"]
        }
      }
    }
    
    // Scrape blackbox-exporter probes for node monitoring
    prometheus.scrape "blackbox_node_probes" {
      targets = [
        {"__address__" = "10.1.100.101", "__param_module" = "icmp"},
        {"__address__" = "10.1.100.102", "__param_module" = "icmp"},
        {"__address__" = "10.1.100.103", "__param_module" = "icmp"},
        {"__address__" = "10.1.100.104", "__param_module" = "icmp"},
        {"__address__" = "10.1.100.105", "__param_module" = "icmp"},
        {"__address__" = "10.1.100.106", "__param_module" = "icmp"},
        {"__address__" = "10.1.100.107", "__param_module" = "icmp"},
      ]
      
      forward_to = [prometheus.relabel.blackbox.receiver]
      
      scrape_interval = "30s"
      scrape_timeout = "10s"
      
      // Point to blackbox-exporter service
      params = {
        "module" = ["icmp"],
      }
      
      // Rewrite to use blackbox-exporter endpoint
      rule {
        source_labels = ["__address__"]
        target_label = "__param_target"
      }
      
      rule {
        target_label = "__address__"
        replacement = "blackbox-exporter.observability.svc.cluster.local:9115"
      }
      
      rule {
        source_labels = ["__param_target"]
        target_label = "instance"
      }
      
      rule {
        target_label = "job"
        replacement = "blackbox-node-probes"
      }
      
      metrics_path = "/probe"
    }
    
    // Scrape application metrics from service monitors
    prometheus.operator.servicemonitors "apps" {
      forward_to = [prometheus.relabel.applications.receiver]
      
      // Only scrape from specific namespaces
      namespaces = ["default", "media", "home", "security", "network"]
      
      // Only scrape services with specific labels
      selector {
        match_labels = {
          "prometheus.io/forward" = "true",
        }
      }
    }
    
    // Filter infrastructure metrics to essential ones only
    prometheus.relabel "infrastructure_metrics" {
      forward_to = [prometheus.remote_write.grafana_cloud.receiver]
      
      // Keep only essential metrics
      rule {
        source_labels = ["__name__"]
        regex = "up|node_cpu_seconds_total|node_memory_MemAvailable_bytes|node_memory_MemTotal_bytes|node_filesystem_avail_bytes|node_filesystem_size_bytes|node_disk_io_time_seconds_total|node_network_receive_bytes_total|node_network_transmit_bytes_total|node_load1|node_load5|node_load15|kube_node_status_condition|kube_node_info|kube_node_status_allocatable|kube_node_status_capacity"
        action = "keep"
      }
      
      // Keep instance and job labels  
      rule {
        source_labels = ["instance"]
        target_label = "node"
        regex = "([^:]+):.*"
        replacement = "${1}"
      }
    }
    
    // Forward blackbox probe metrics to Grafana Cloud
    prometheus.relabel "blackbox" {
      forward_to = [prometheus.remote_write.grafana_cloud.receiver]
      
      // Keep only probe metrics for node monitoring
      rule {
        source_labels = ["__name__"]
        regex = "probe_success|probe_duration_seconds|probe_icmp_duration_seconds.*"
        action = "keep"
      }
      
      // Add probe type label for easy filtering
      rule {
        target_label = "probe_type"
        replacement = "node_icmp"
      }
    }
    
    // Relabel and filter application metrics
    prometheus.relabel "applications" {
      forward_to = [prometheus.remote_write.grafana_cloud.receiver]
      
      // Keep only essential metrics for applications
      rule {
        source_labels = ["__name__"]
        regex = "up|.*_info|.*_requests_total|.*_request_duration_seconds.*|.*_errors_total|.*_restart_total|.*_ready"
        action = "keep"
      }
      
      // Drop metrics from non-critical pods
      rule {
        source_labels = ["namespace"]
        regex = "kube-system|rook-ceph|flux-system|storage|external-secrets"
        action = "drop"
      }
      
      // Aggregate by removing pod name for deployments (keep for statefulsets)
      rule {
        source_labels = ["__name__", "statefulset"]
        regex = ".*;$"
        target_label = "__tmp_keep_pod"
        replacement = "false"
      }
      
      rule {
        source_labels = ["__tmp_keep_pod", "pod"]
        regex = "false;.*"
        target_label = "pod"
        replacement = ""
      }
    }
    
    // Scrape ingress metrics
    prometheus.scrape "ingress" {
      targets = [
        {"__address__" = "ingress-nginx-internal-controller-metrics.network.svc.cluster.local:10254"},
        {"__address__" = "ingress-nginx-external-controller-metrics.network.svc.cluster.local:10254"},
      ]
      
      forward_to = [prometheus.relabel.ingress.receiver]
      
      scrape_interval = "30s"
    }
    
    // Filter ingress metrics
    prometheus.relabel "ingress" {
      forward_to = [prometheus.remote_write.grafana_cloud.receiver]
      
      // Keep only essential ingress metrics
      rule {
        source_labels = ["__name__"]
        regex = "nginx_ingress_controller_requests|nginx_ingress_controller_request_duration_seconds.*|nginx_ingress_controller_ssl_expire_time_seconds"
        action = "keep"
      }
      
      // Keep only important status codes
      rule {
        source_labels = ["status"]
        regex = "([45]..|total)"
        action = "keep"
      }
    }
    
    // Scrape critical app endpoints directly
    prometheus.scrape "critical_apps" {
      targets = [
        {"__address__" = "authentik-metrics.security.svc.cluster.local:9300", "app" = "authentik", "namespace" = "security"},
        {"__address__" = "gatus.observability.svc.cluster.local:80", "app" = "gatus", "namespace" = "observability"},
        {"__address__" = "home-assistant.home.svc.cluster.local:8123", "app" = "home-assistant", "namespace" = "home"},
      ]
      
      forward_to = [prometheus.relabel.critical.receiver]
      
      scrape_interval = "60s"
      metrics_path = "/metrics"
    }
    
    // Minimal filtering for critical apps
    prometheus.relabel "critical" {
      forward_to = [prometheus.remote_write.grafana_cloud.receiver]
      
      // Add environment label
      rule {
        target_label = "environment"
        replacement = "production"
      }
      
      // Keep app label
      rule {
        source_labels = ["app"]
        target_label = "application"
      }
      
      // Add job label from app
      rule {
        source_labels = ["app"]
        target_label = "job"
      }
    }
    
    // Self-monitoring
    prometheus.scrape "alloy" {
      targets = [{"__address__" = "127.0.0.1:12345"}]
      forward_to = [prometheus.remote_write.grafana_cloud.receiver]
      scrape_interval = "60s"
    }