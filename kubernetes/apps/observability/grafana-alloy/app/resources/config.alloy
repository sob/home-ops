// Prometheus Remote Write to Grafana Cloud
prometheus.remote_write "grafana_cloud" {
  endpoint {
    url = env("PROMETHEUS_URL")
    basic_auth {
      username = env("PROMETHEUS_USERNAME")
      password = env("PROMETHEUS_PASSWORD")
    }
  }
}

// Loki Write to Grafana Cloud
loki.write "grafana_cloud" {
  endpoint {
    url = env("LOKI_URL")
    basic_auth {
      username = env("LOKI_USERNAME")
      password = env("LOKI_PASSWORD")
    }
  }
}

// ServiceMonitor discovery
prometheus.operator.servicemonitors "servicemonitors" {
  forward_to = [prometheus.remote_write.grafana_cloud.receiver]
}

// PodMonitor discovery
prometheus.operator.podmonitors "podmonitors" {
  forward_to = [prometheus.remote_write.grafana_cloud.receiver]
}

// Node exporter - critical for infrastructure monitoring
discovery.kubernetes "nodes" {
  role = "node"
}

discovery.relabel "node_exporter" {
  targets = discovery.kubernetes.nodes.targets

  rule {
    target_label = "__address__"
    replacement  = "kubernetes.default.svc.cluster.local:443"
  }

  rule {
    source_labels = ["__meta_kubernetes_node_name"]
    regex         = "(.+)"
    replacement   = "/api/v1/nodes/${1}/proxy/metrics"
    target_label  = "__metrics_path__"
  }

  rule {
    source_labels = ["__meta_kubernetes_node_name"]
    target_label  = "instance"
  }

  rule {
    target_label = "job"
    replacement  = "node-exporter"
  }
}

prometheus.scrape "node_exporter" {
  targets    = discovery.relabel.node_exporter.output
  forward_to = [prometheus.remote_write.grafana_cloud.receiver]
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
  tls_config {
    ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
  }
}

// Discover Kubernetes pods for log collection
discovery.kubernetes "pods_logs" {
  role = "pod"
}

// Relabel pods for logging
discovery.relabel "pods_logs" {
  targets = discovery.kubernetes.pods_logs.targets

  rule {
    source_labels = ["__meta_kubernetes_pod_node_name"]
    target_label  = "__host__"
  }

  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    target_label  = "namespace"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    target_label  = "pod"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    target_label  = "container"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    target_label  = "__path__"
    separator     = "/"
    replacement   = "/var/log/pods/*$1/*.log"
  }
}

// Collect logs from Kubernetes pods
loki.source.kubernetes "pods" {
  targets    = discovery.relabel.pods_logs.output
  forward_to = [loki.write.grafana_cloud.receiver]
}

// Collect system logs
loki.source.journal "system_logs" {
  forward_to = [loki.write.grafana_cloud.receiver]
  labels     = {
    job = "systemd-journal",
    host = env("HOSTNAME"),
  }
}