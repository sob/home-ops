---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "Validate"

on:
  pull_request:
    branches: ["main"]
    paths:
      - "kubernetes/**"
      - ".github/workflows/validate.yaml"
      - ".github/scripts/**"
      - ".github/policies/**"

env:
  KUBERNETES_DIR: ./kubernetes

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

jobs:
  changed-files:
    name: Get Changed Files
    runs-on: ubuntu-latest
    outputs:
      all_changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
      any_changed: ${{ steps.changed-files.outputs.any_changed }}
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            kubernetes/**
          files_ignore: |
            *.md
            .gitkeep

  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-latest
    needs: [changed-files]
    if: needs.changed-files.outputs.any_changed == 'true'
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: YAML Lint
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: kubernetes
          config_file: .yamllint.yaml

  schema-validation:
    name: Schema Validation
    runs-on: ubuntu-latest
    needs: [changed-files]
    if: needs.changed-files.outputs.any_changed == 'true'
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.x

      - name: Install yajsv
        run: |
          go install github.com/neilpa/yajsv@latest

      - name: Validate YAML schemas
        run: |
          export PATH="${PATH}:$(go env GOPATH)/bin"
          .github/scripts/validate-yaml-schemas.sh

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --debug --only-verified

      - name: Scan for secrets with gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GITLEAKS_ENABLE_COMMENTS: true
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: true
          GITLEAKS_ENABLE_SUMMARY: true

  kustomize-build:
    name: Kustomize Build
    runs-on: ubuntu-latest
    needs: [changed-files]
    if: needs.changed-files.outputs.any_changed == 'true'
    strategy:
      matrix:
        path:
          - flux
          - apps
      fail-fast: false
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: Setup Kustomize
        uses: fluxcd/pkg/actions/kustomize@main

      - name: Validate Kustomizations
        run: |
          set -euo pipefail
          find "${{ env.KUBERNETES_DIR }}/${{ matrix.path }}" -type f -name kustomization.yaml \
            -not -path "*/components/*" \
            -print0 | while IFS= read -r -d '' file; do
            dir="${file%/kustomization.yaml}"
            echo "::group::Building ${dir}"
            if ! kustomize build "${dir}" --load-restrictor=LoadRestrictionsNone > /dev/null; then
              echo "::error file=${file}::Failed to build kustomization"
              exit 1
            fi
            echo "::endgroup::"
          done

  kubeconform:
    name: Kubeconform
    runs-on: ubuntu-latest
    needs: [changed-files, kustomize-build]
    if: needs.changed-files.outputs.any_changed == 'true'
    strategy:
      matrix:
        kubernetes_version:
          - "1.31.0"  # Current cluster version
      fail-fast: false
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.x

      - name: Install Tools
        run: |
          go install github.com/yannh/kubeconform/cmd/kubeconform@latest
          go install sigs.k8s.io/kustomize/kustomize/v5@latest

      - name: Find affected kustomizations
        id: affected
        if: needs.changed-files.outputs.any_changed == 'true'
        run: |
          chmod +x .github/scripts/find-affected-kustomizations.sh
          affected_dirs=$(.github/scripts/find-affected-kustomizations.sh "${{ needs.changed-files.outputs.all_changed_files }}")
          echo "dirs=$affected_dirs" >> $GITHUB_OUTPUT

      - name: Run kubeconform
        run: |
          set -euo pipefail

          # Create kubeconform wrapper script
          cat > kubeconform-wrapper.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail

          KUBERNETES_DIR="${1:-./kubernetes}"
          KUBERNETES_VERSION="${2:-1.31.0}"
          SPECIFIC_DIRS="${3:-}"

          kubeconform_args=(
            "-kubernetes-version" "${KUBERNETES_VERSION}"
            "-strict"
            "-ignore-missing-schemas"
            "-skip" "Secret,ExternalSecret,SopsSecret"
            "-schema-location" "default"
            "-schema-location" "https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json"
            "-summary"
            "-output" "json"
          )

          if [ -n "$SPECIFIC_DIRS" ]; then
            echo "=== Validating specific directories ==="
            for dir in $SPECIFIC_DIRS; do
              # Check if it's a flux directory
              if [[ "$dir" =~ ^${KUBERNETES_DIR}/flux/ ]] && [ -f "$dir/*.yaml" ]; then
                find "$dir" -type f -name "*.yaml" \
                  -not -path "*/kustomization.yaml" \
                  -exec kubeconform "${kubeconform_args[@]}" {} +
              # Check if it has a kustomization.yaml
              elif [ -f "$dir/kustomization.yaml" ]; then
                echo "Validating: ${dir}"
                kustomize build "${dir}" --load-restrictor=LoadRestrictionsNone | \
                  kubeconform "${kubeconform_args[@]}"
              fi
            done
          else
            # Validate flux manifests
            echo "=== Validating Flux manifests ==="
            find "${KUBERNETES_DIR}/flux" -type f -name "*.yaml" \
              -not -path "*/kustomization.yaml" \
              -exec kubeconform "${kubeconform_args[@]}" {} +

            # Validate app kustomizations
            echo "=== Validating App kustomizations ==="
            find "${KUBERNETES_DIR}/apps" -type f -name "kustomization.yaml" \
              -not -path "*/components/*" | while read -r file; do
              dir="${file%/kustomization.yaml}"
              echo "Validating: ${dir}"
              kustomize build "${dir}" --load-restrictor=LoadRestrictionsNone | \
                kubeconform "${kubeconform_args[@]}"
            done
          fi
          EOF

          chmod +x kubeconform-wrapper.sh
          if [ "${{ needs.changed-files.outputs.any_changed }}" == "true" ] && [ -n "${{ steps.affected.outputs.dirs }}" ]; then
            ./kubeconform-wrapper.sh "${{ env.KUBERNETES_DIR }}" "${{ matrix.kubernetes_version }}" "${{ steps.affected.outputs.dirs }}"
          else
            ./kubeconform-wrapper.sh "${{ env.KUBERNETES_DIR }}" "${{ matrix.kubernetes_version }}"
          fi

  flux-local-test:
    name: Flux Local Test
    runs-on: ubuntu-latest
    needs: [changed-files]
    if: needs.changed-files.outputs.any_changed == 'true'
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Setup Flux
        uses: fluxcd/flux2/action@v2.4.0

      - name: Install flux-local
        run: pip install flux-local[helm]

      - name: Find affected Flux Kustomizations
        id: affected_flux
        if: needs.changed-files.outputs.any_changed == 'true'
        run: |
          # Find ks.yaml files that might be affected by changes
          affected_ks=""
          for file in ${{ needs.changed-files.outputs.all_changed_files }}; do
            # Check if this is in the apps directory
            if [[ "$file" =~ ^kubernetes/apps/ ]]; then
              # Find parent directory and check for ks.yaml
              dir=$(dirname "$file")
              while [[ "$dir" != "." && "$dir" != "kubernetes" ]]; do
                if [ -f "$dir/ks.yaml" ]; then
                  affected_ks="$affected_ks $dir/ks.yaml"
                  break
                fi
                dir=$(dirname "$dir")
              done
            fi
          done

          # Remove duplicates
          affected_ks=$(echo $affected_ks | tr ' ' '\n' | sort -u | tr '\n' ' ')
          echo "affected_ks=$affected_ks" >> $GITHUB_OUTPUT

          if [ -n "$affected_ks" ]; then
            echo "Found affected Flux Kustomizations: $affected_ks"
          fi

      - name: Run flux-local test
        env:
          PYTHONWARNINGS: "ignore::DeprecationWarning"
          PYTEST_ADDOPTS: "--tb=short -q -o asyncio_default_fixture_loop_scope=function -W ignore::DeprecationWarning"
        run: |
          # For now, always run full test since flux-local doesn't support selective testing
          # TODO: Implement selective testing when flux-local supports it
          flux-local test \
            --enable-helm \
            --all-namespaces \
            --sources flux-system \
            --path ./kubernetes/flux/cluster \
            --verbosity 1

  flux-local-diff:
    name: Flux Local Diff
    runs-on: ubuntu-latest
    needs: [changed-files]
    if: needs.changed-files.outputs.any_changed == 'true'
    permissions:
      pull-requests: write
    strategy:
      matrix:
        resource: ["helmrelease", "kustomization"]
      fail-fast: false
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"
          path: pr

      - name: Checkout main
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"
          ref: main
          path: main

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install flux-local
        run: pip install flux-local[helm]

      - name: Generate diff
        id: diff
        run: |
          set -euo pipefail

          flux-local diff ${{ matrix.resource }} \
            --unified 6 \
            --path ./pr/kubernetes/flux/cluster \
            --path-orig ./main/kubernetes/flux/cluster \
            --strip-attrs "helm.sh/chart,checksum/config,app.kubernetes.io/version,chart" \
            --limit-bytes 50000 \
            --all-namespaces \
            --sources flux-system \
            --output-file diff.patch || true

          if [ -s diff.patch ]; then
            echo "has_diff=true" >> $GITHUB_OUTPUT
            {
              echo 'diff<<EOF'
              cat diff.patch
              echo 'EOF'
            } >> $GITHUB_OUTPUT
          else
            echo "has_diff=false" >> $GITHUB_OUTPUT
          fi

      - name: Add PR comment
        if: steps.diff.outputs.has_diff == 'true'
        uses: mshick/add-pr-comment@v2
        with:
          repo-token: ${{ steps.app-token.outputs.token }}
          message-id: flux-diff-${{ matrix.resource }}
          message: |
            ### Flux ${{ matrix.resource }} diff

            <details>
            <summary>View diff</summary>

            ```diff
            ${{ steps.diff.outputs.diff }}
            ```

            </details>

  helm-values-validation:
    name: Helm Values Validation
    runs-on: ubuntu-latest
    needs: [changed-files]
    if: needs.changed-files.outputs.any_changed == 'true'
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: Setup Helm
        uses: azure/setup-helm@v4

      - name: Validate HelmReleases
        run: |
          set -euo pipefail

          # Find all HelmReleases and validate their values
          find "${{ env.KUBERNETES_DIR }}" -type f -name "helmrelease.yaml" -o -name "helm-release.yaml" | while read -r file; do
            echo "::group::Validating ${file}"

            # Extract values from HelmRelease if inline
            if yq e '.spec.values' "${file}" > /dev/null 2>&1; then
              yq e '.spec.values' "${file}" > /tmp/values.yaml
              echo "Extracted inline values"
            fi

            # Check for values file reference
            values_file=$(dirname "${file}")/helm-values.yaml
            if [ -f "${values_file}" ]; then
              echo "Found values file: ${values_file}"
              # Validate YAML syntax
              yq e '.' "${values_file}" > /dev/null || {
                echo "::error file=${values_file}::Invalid YAML syntax"
                exit 1
              }
            fi

            echo "::endgroup::"
          done

  opa-policies:
    name: OPA Policy Validation
    runs-on: ubuntu-latest
    needs: [changed-files, kubeconform]
    if: needs.changed-files.outputs.any_changed == 'true'
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: Setup yq
        uses: mikefarah/yq@v4

      - name: Setup jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Setup Kustomize
        uses: fluxcd/pkg/actions/kustomize@main

      - name: Install OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64_static
          chmod +x opa
          sudo mv opa /usr/local/bin/

      - name: Find affected kustomizations
        id: affected
        if: needs.changed-files.outputs.any_changed == 'true'
        run: |
          chmod +x .github/scripts/find-affected-kustomizations.sh
          affected_dirs=$(.github/scripts/find-affected-kustomizations.sh "${{ needs.changed-files.outputs.all_changed_files }}")
          echo "dirs=$affected_dirs" >> $GITHUB_OUTPUT
          if [ -n "$affected_dirs" ]; then
            echo "Found affected directories: $affected_dirs"
          else
            echo "No affected directories found"
          fi

      - name: Run OPA validation
        run: |
          chmod +x .github/scripts/validate-opa.sh
          if [ "${{ needs.changed-files.outputs.any_changed }}" == "true" ] && [ -n "${{ steps.affected.outputs.dirs }}" ]; then
            echo "Running OPA validation on affected directories"
            .github/scripts/validate-opa.sh --dirs "${{ steps.affected.outputs.dirs }}"
          else
            echo "Running full OPA validation"
            .github/scripts/validate-opa.sh
          fi

  validate-success:
    name: Validation Success
    runs-on: ubuntu-latest
    needs:
      - yaml-lint
      - schema-validation
      - secret-scan
      - kustomize-build
      - kubeconform
      - flux-local-test
      - flux-local-diff
      - helm-values-validation
      - opa-policies
    if: always()
    steps:
      - name: Check results
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "::error::One or more validation checks failed"
            exit 1
          fi
          echo "✅ All validation checks passed"
