# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"
output: "interleaved"

vars:
  PG_RESOURCES_DIR: "{{.ROOT_DIR}}/.taskfiles/cnpg/resources"
  NS: '{{.NS | default "database"}}'
  WAIT: '{{.WAIT | default "true"}}'
  TIMEOUT: '{{.TIMEOUT | default "5m"}}'
  CLUSTER_FILE: "{{.ROOT_DIR}}/kubernetes/apps/database/cloudnative-pg/cluster/cluster16.yaml"

tasks:
  backup:
    desc: Backup the postgres cluster [CLUSTER=required] [NS=database]
    requires:
      vars: ["CLUSTER", "NS"]
    cmds:
      - bash {{.PG_RESOURCES_DIR}}/backup-postgres.sh {{.NS}} {{.CLUSTER}} {{.WAIT}} {{.TIMEOUT}}
    preconditions:
      - test -x {{.PG_RESOURCES_DIR}}/backup-postgres.sh
      - which kubectl

  list:
    desc: List all available backups [NS=database]
    cmds:
      - |
        echo "Available backups in namespace {{.NS}}:"
        if ! kubectl get backups -n {{.NS}} 2>/dev/null | grep -q .; then
          echo "No backups found in namespace {{.NS}}"
          exit 1
        fi
        kubectl get backups -n {{.NS}} \
          -o custom-columns=NAME:.metadata.name,AGE:.metadata.creationTimestamp,PHASE:.status.phase,SIZE:.status.backupSize,REPOSITORY:.status.repository

  restore:
    desc: Restore cluster from backup [CLUSTER=required] [BACKUP_NAME=required] [NS=database]
    requires:
      vars: ["CLUSTER", "NS", "BACKUP_NAME"]
    cmds:
      - bash {{.PG_RESOURCES_DIR}}/restore-postgres.sh {{.NS}} {{.CLUSTER}} {{.BACKUP_NAME}} {{.CLUSTER_FILE}}
    preconditions:
      - test -x {{.PG_RESOURCES_DIR}}/restore-postgres.sh
      - test -f {{.CLUSTER_FILE}}
      - which kubectl

  restore-pitr:
    desc: Restore cluster to a point in time [CLUSTER=required] [BACKUP_NAME=required] [TARGET_TIME=required] [NS=database]
    requires:
      vars: ["CLUSTER", "NS", "BACKUP_NAME", "TARGET_TIME"]
    cmds:
      - bash {{.PG_RESOURCES_DIR}}/restore-postgres-pitr.sh {{.NS}} {{.CLUSTER}} {{.BACKUP_NAME}} {{.TARGET_TIME}} {{.CLUSTER_FILE}}
    preconditions:
      - test -x {{.PG_RESOURCES_DIR}}/restore-postgres-pitr.sh
      - test -f {{.CLUSTER_FILE}}
      - which kubectl

  destroy:
    desc: Delete a postgres cluster [CLUSTER=required] [NS=database]
    requires:
      vars: ["CLUSTER", "NS"]
    cmds:
      - bash {{.PG_RESOURCES_DIR}}/destroy-postgres.sh {{.NS}} {{.CLUSTER}}
    preconditions:
      - test -x {{.PG_RESOURCES_DIR}}/destroy-postgres.sh
      - which kubectl

  verify:
    desc: Verify the restored cluster is working [CLUSTER=required] [NS=database]
    silent: false
    requires:
      vars: ["CLUSTER", "NS"]
    cmds:
      - |
        echo "Waiting for new cluster to be ready..."
        kubectl wait --for=condition=Ready cluster/{{.CLUSTER}} -n {{.NS}} --timeout={{.TIMEOUT}}

        echo "Verifying new cluster..."
        kubectl cnpg status {{.CLUSTER}} -n {{.NS}}
        echo "Checking primary is accepting connections..."
        kubectl exec -it {{.CLUSTER}}-1 -n {{.NS}} -- pg_isready
