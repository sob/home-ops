---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"
output: "interleaved"

vars:
  CRDS:
    sh: kubectl get crd -n rook-ceph | awk '/ceph.rook.io/ {print $1}'
  NODES:
    - metal-04
    - metal-05
    - metal-06
    - metal-07
  ROOK_RESOURCES_DIR: '{{.ROOT_DIR}}/.taskfiles/rook/resources'

tasks:
  nuke:
    desc: Nuke rook-cluster
    silent: false
    cmds:
      - { task: .delete, vars: { TYPE: kustomization, NS: flux-system, ITEM: "rook-ceph rook-ceph-cluster" } }
      - { task: .delete, vars: { TYPE: helmrelease, ITEM: "rook-ceph-cluster rook-ceph-operator" } }
      - { task: .patch, vars: { TYPE: secret, ITEM: rook-ceph-mon } }
      - { task: .patch, vars: { TYPE: configmap, ITEM: rook-ceph-mon-endpoints } }
      - { task: .patch-all }
      - { task: .delete-all }
      - { task: .delete, vars: { TYPE: storageclass, ITEM: "ceph-block ceph-bucket ceph-filesystem" } }
      - { task: .delete-crds }
      - { task: .delete, vars: { TYPE: namespace, ITEM: rook-ceph } }
      - { task: .wipe-all }

  .wipe-all:
    internal: true
    silent: false
    cmds:
      - for: { var: NODES }
        task: .wipe-disk
        vars: { NODE: '{{.ITEM}}', DISK: '/dev/sda' }
      - for: { var: NODES }
        task: .wipe-node
        vars: { NODE: '{{.ITEM}}' }

  .wipe-disk:
    internal: true
    silent: false
    cmds:
      - /usr/local/bin/envsubst < <(cat {{.ROOK_RESOURCES_DIR}}/rook-disk-job.tmpl.yaml) | kubectl apply -f -
      - bash {{.ROOK_RESOURCES_DIR}}/wait-for-job.sh {{.JOB}} {{.NS}}
      - kubectl --namespace {{.NS}} wait job/{{.JOB}} --for condition=complete --timeout=1m
      - kubectl --namespace {{.NS}} logs job/{{.JOB}}
      - kubectl --namespace {{.NS}} delete job {{.JOB}}
    vars:
      JOB: wipe-disk-{{.NODE}}
      NS: '{{.NS | default "default"}}'
      DISK: '{{.DISK | default "/dev/sda"}}'
    env:
      JOB: '{{.JOB}}'
      NODE: '{{.NODE}}'
      NS: '{{.NS}}'
      DISK: '{{.DISK | default "/dev/sda"}}'
    preconditions:
      - test -f /usr/local/bin/envsubst
      - test -f {{.ROOK_RESOURCES_DIR}}/wait-for-job.sh
      - test -f {{.ROOK_RESOURCES_DIR}}/rook-disk-job.tmpl.yaml

  .wipe-node:
    internal: true
    silent: false
    cmds:
      - /usr/local/bin/envsubst < <(cat {{.ROOK_RESOURCES_DIR}}/rook-data-job.tmpl.yaml) | kubectl apply -f -
      - bash {{.ROOK_RESOURCES_DIR}}/wait-for-job.sh {{.JOB}} {{.NS}}
      - kubectl --namespace {{.NS}} wait job/{{.JOB}} --for condition=complete --timeout=1m
      - kubectl --namespace {{.NS}} logs job/{{.JOB}}
      - kubectl --namespace {{.NS}} delete job {{.JOB}}
    vars:
      JOB: wipe-data-{{.NODE}}
      NS: '{{.NS | default "default"}}'
    env:
      JOB: '{{.JOB}}'
      NODE: '{{.NODE}}'
      NS: '{{.NS}}'
    preconditions:
      - test -f /usr/local/bin/envsubst
      - test -f {{.ROOK_RESOURCES_DIR}}/wait-for-job.sh
      - test -f {{.ROOK_RESOURCES_DIR}}/rook-data-job.tmpl.yaml

  .patch:
    internal: true
    silent: false
    cmd: |
      kubectl patch --namespace rook-ceph {{.TYPE}} {{.ITEM}} --type merge -p '{"metadata":{"finalizers": []}}'
    vars:
      TYPE: '{{.TYPE}}'
      ITEM: '{{.ITEM}}'

  .patch-all:
    internal: true
    silent: false
    desc: Patch object finalizers to remove rook-ceph dependency
    cmds:
      - for: { var: CRDS }
        cmd: |
          kubectl get -n rook-ceph "{{.ITEM}}" -o name | xargs -I {} kubectl patch --namespace rook-ceph {} --type merge -p '{"metadata":{"finalizers": []}}'

  .delete:
    internal: true
    silent: false
    desc: delete kubernetes object
    cmds:
      - kubectl delete {{.TYPE}} {{.ITEM}} --namespace {{.NS}} --grace-period=0 --force=true --wait=false --ignore-not-found=true

  .delete-all:
    internal: true
    silent: false
    desc: Delete rook-ceph objects
    cmds:
      - for : { var: CRDS }
        cmd: |
          kubectl get -n rook-ceph {{.ITEM}} -o name | xargs -I {} kubectl delete --namespace rook-ceph {} --grace-period=0 --force=true --wait=false --ignore-not-found=true

  .delete-crds:
    internal: true
    cmds:
      - for: { var: CRDS }
        task: .delete
        vars:
          TYPE: 'customresourcedefinition'
          ITEM: '{{.ITEM}}'
        cmd: kubectl delete crds/{{.ITEM}} --grace-period=0 --force=true --wait=false --ignore-not-found=true
