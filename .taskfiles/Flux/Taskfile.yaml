---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  apply:
    desc: Apply a Flux Kustomization resource for a cluster
    summary: |
      args:
        PATH: Path under apps containing the Flux Kustomization resource (ks.yaml) (required)
        NS: Namespace the Flux Kustomization exists in (default: flux-system)
    cmd: >
      flux build --namespace flux-system ks {{base .PATH}}
      --kustomization-file {{.KUBERNETES_DIR}}/apps/{{.PATH}}/ks.yaml
      --path {{.KUBERNETES_DIR}}/apps/{{.PATH}}{{if contains .KUSTOMIZATION "not found"}} --dry-run{{end}}
      | yq 'with(select(.apiVersion == "kustomize.toolkit.fluxcd.io/v1" and .kind == "Kustomization"); .metadata.namespace = "flux-system")' -
      | kubectl apply --server-side --field-manager=kustomize-controller --filename -
    requires:
      vars: [PATH]
    vars:
      KUSTOMIZATION:
        sh: flux --namespace flux-system get kustomizations {{base .PATH}} 2>&1
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/apps/{{.PATH}}/ks.yaml

  reconcile:
    desc: Force update Flux to pull in changes from your Git repository
    cmd: flux --kubeconfig {{.KUBECONFIG_FILE}} reconcile --namespace flux-system kustomization cluster --with-source
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}

  delete:
    desc: Delete an app but leave the volume
    cmds:
      - kubectl patch helmrelease --namespace {{.NS | default "default" }} {{.APP}} -p $'metadata:\n finalizers:\n  []' --type=merge || exit 1
      - kubectl delete helmrelease --namespace {{.NS | default "default"}} {{.APP}} --grace-period=0 --force=true --wait=false --ignore-not-found=true &>/dev/null
    vars:
      NS:
        sh: kubectl get -A helmrelease --no-headers --field-selector=metadata.name={{.APP}} 2>/dev/null | awk '{print $1}' || exit 1
      KS:
        sh: kubectl get -A helmrelease --no-headers --field-selector=metadata.name={{.APP}} -o json | jq -r ".items[] | .metadata.labels.\"kustomize.toolkit.fluxcd.io/name\""
    requires:
      vars: ["APP"]

  nuke:
    desc: Nuke an app and associated volumes
    cmds:
      - kubectl delete kustomization --namespace flux-system {{.APP}} --grace-period=0 --force=true --wait=false --ignore-not-found=true
      - kubectl delete persistentvolumeclaims {{.APP}} --grace-period=0 --force=true --wait=false --ignore-not-found=true
      - kubectl delete helmrelease --namespace {{.NS | default "default"}} {{.APP}} --grace-period=0 --force=true --wait=false --ignore-not-found=true
      - kubectl delete ReplicationDestination --namespace {{.NS | default "default"}} {{.APP}} --grace-period=0 --force=true --wait=false --ignore-not-found=true
      - kubectl delete ReplicationSource --namespace {{.NS | default "default"}} {{.APP}} --grace-period=0 --force=true --wait=false --ignore-not-found=true
      - task: cluster-apps
    vars:
      NS:
        sh: kubectl get -A helmrelease --no-headers --field-selector=metadata.name={{.APP}} | awk '{print $1}'
    requires:
      vars: ["APP"]

  helmrelease:
    aliases: ["hr", "helm"]
    desc: Force reconcile a helmrelease record
    cmds:
      - task: .reconcile
        vars: {TYPE: "helmrelease"}
    requires:
      vars: ["APP"]

  cluster-apps:
    aliases: ["apps"]
    desc: Force reconciliation of the cluster-apps kustomization
    cmd: flux reconcile kustomization cluster-apps --with-source

  kustomization:
    aliases: ["ks"]
    desc: Force reconcile a kustomization record
    cmds:
      - task: .reconcile
        vars: { NS: "flux-system", TYPE: "kustomization"}
    vars:
      NS: "flux-system"
      TYPE: "kustomization"

  bootstrap:
    cmds:
      - kubectl apply --server-side --force-conflicts --kustomize {{.KUBERNETES_DIR}}/bootstrap/flux

  .reconcile:
    internal: true
    cmd: flux reconcile --namespace {{.NS}} {{.TYPE}} {{.APP}} {{if eq "helmrelease" .TYPE}}--force{{end}} {{if eq "kustomization" .TYPE}}--with-source{{end}}
    vars:
      NS:
        sh: kubectl get -A {{.TYPE}} --no-headers --field-selector=metadata.name={{.APP}} | awk '{print $1}'
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG}}
