---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  apply:
    desc: Apply a Flux Kustomization resource for a cluster
    summary: |
      args:
        PATH: Path under apps containing the Flux Kustomization resource (ks.yaml) (required)
        NS: Namespace the Flux Kustomization exists in (default: flux-system)
    cmd: >
      flux build --namespace flux-system ks {{base .PATH}}
      --kustomization-file {{.KUBERNETES_DIR}}/apps/{{.PATH}}/ks.yaml
      --path {{.KUBERNETES_DIR}}/apps/{{.PATH}}{{if contains .KUSTOMIZATION "not found"}} --dry-run{{end}}
      | yq 'with(select(.apiVersion == "kustomize.toolkit.fluxcd.io/v1" and .kind == "Kustomization"); .metadata.namespace = "flux-system")' -
      | kubectl apply --server-side --field-manager=kustomize-controller --filename -
    requires:
      vars: [PATH]
    vars:
      KUSTOMIZATION:
        sh: flux --namespace flux-system get kustomizations {{base .PATH}} 2>&1
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/apps/{{.PATH}}/ks.yaml

  reconcile:
    desc: Force update Flux to pull in changes from your Git repository
    cmd: flux --kubeconfig {{.KUBECONFIG_FILE}} reconcile --namespace flux-system kustomization cluster --with-source
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}

  delete:
    desc: Delete an app but leave the volume
    cmds:
      - kubectl patch helmrelease --namespace {{.NS | default "default" }} {{.APP}} -p $'metadata:\n finalizers:\n  []' --type=merge || exit 1
      - kubectl delete helmrelease --namespace {{.NS | default "default"}} {{.APP}} --grace-period=0 --force=true --wait=false --ignore-not-found=true &>/dev/null
    vars:
      NS:
        sh: kubectl get -A helmrelease --no-headers --field-selector=metadata.name={{.APP}} 2>/dev/null | awk '{print $1}' || exit 1
      KS:
        sh: kubectl get -A helmrelease --no-headers --field-selector=metadata.name={{.APP}} -o json | jq -r ".items[] | .metadata.labels.\"kustomize.toolkit.fluxcd.io/name\""
    requires:
      vars: ["APP"]

  nuke:
    desc: Nuke an app and associated volumes
    cmds:
      - kubectl delete kustomization --namespace flux-system {{.APP}} --grace-period=0 --force=true --wait=false --ignore-not-found=true
      - kubectl delete persistentvolumeclaims {{.APP}} --grace-period=0 --force=true --wait=false --ignore-not-found=true
      - kubectl delete helmrelease --namespace {{.NS | default "default"}} {{.APP}} --grace-period=0 --force=true --wait=false --ignore-not-found=true
      - kubectl delete ReplicationDestination --namespace {{.NS | default "default"}} {{.APP}} --grace-period=0 --force=true --wait=false --ignore-not-found=true
      - kubectl delete ReplicationSource --namespace {{.NS | default "default"}} {{.APP}} --grace-period=0 --force=true --wait=false --ignore-not-found=true
      - task: cluster-apps
    vars:
      NS:
        sh: kubectl get -A helmrelease --no-headers --field-selector=metadata.name={{.APP}} | awk '{print $1}'
    requires:
      vars: ["APP"]

  helmrelease:
    aliases: ["hr", "helm"]
    desc: Force reconcile a helmrelease record
    cmds:
      - task: .patch
        vars: {TYPE: "helmrelease", APP: "{{.APP}}", NS: "{{.NS}}"}
      - task: .patch
        vars: {TYPE: "kustomization", APP: "{{.KS}}", NS: "{{.NS}}"}
      - task: .delete
        vars: {TYPE: "configmap", LABEL: "app.kubernetes.io/name={{.KS}}", NS: "{{.NS}}"}
      - task: .delete
        vars: {TYPE: "persistentvolumeclaim", APP: "{{.APP}}", NS: "{{.NS}}"}
      - task: .delete
        vars: {TYPE: "deployment", APP: "{{.APP}}", NS: "{{.NS}}"}
      - task: .delete
        vars: {TYPE: "helmrelease", APP: "{{.APP}}", NS: "{{.NS}}"}
      - task: .delete
        vars: {TYPE: "kustomization", APP: "{{.KS}}", NS: "{{.NS}}"}
      - task: .reconcile
        vars: {TYPE: "kustomization", APP: "cluster-apps", NS: "flux-system"}
    requires:
      vars: ["APP"]
    vars:
      NS:
        sh: kubectl get -A helmrelease --no-headers --field-selector=metadata.name={{.APP}} | awk '{print $1}'
      KS:
        sh: kubectl get helmrelease --namespace {{.NS}} {{.APP}} -o json 2>/dev/null | jq -r '.metadata.labels."kustomize.toolkit.fluxcd.io/name" // ""' || echo ""

  cluster-apps:
    aliases: ["apps"]
    desc: Force reconciliation of the cluster-apps kustomization
    cmd: flux reconcile kustomization cluster-apps --with-source

  wipe:
    desc: Completely wipe an application including HelmRelease, PVCs, and Volsync backups
    silent: true
    summary: |
      args:
        APP: Application name to wipe (required)
        NS: Namespace (optional, will be auto-detected from HelmRelease if not provided)
    vars:
      NS:
        sh: |
          if [ -n "{{.NS}}" ]; then
            echo "{{.NS}}"
          else
            kubectl get -A helmrelease --no-headers --field-selector=metadata.name={{.APP}} 2>/dev/null | awk '{print $1}'
          fi
    prompt: |
      WARNING: This will completely wipe {{.APP}} from namespace {{.NS}}!

      This includes:
      - HelmRelease and all managed resources
      - Persistent Volume Claims (PVCs)
      - Restic backup snapshots from repository
      - All pods, jobs, secrets, and configs

      Are you sure you want to continue?
    cmds:
      # Remove HelmRelease with finalizers
      - kubectl patch helmrelease -n {{.NS}} {{.APP}} -p '{"metadata":{"finalizers":[]}}' --type=merge 2>/dev/null || true
      - task: .delete
        vars: {TYPE: "helmrelease", APP: "{{.APP}}", NS: "{{.NS}}"}

      # Delete resources by common label selectors
      - task: .delete
        vars:
          TYPE: "all,pvc,configmap,secret,ingress,servicemonitor,networkpolicy"
          LABEL: "app.kubernetes.io/name={{.APP}},app.kubernetes.io/instance={{.APP}},app.kubernetes.io/component={{.APP}},app.kubernetes.io/part-of={{.APP}},app={{.APP}}"
          NS: "{{.NS}}"

      # Delete Volsync resources
      - task: .delete
        vars:
          TYPE: "replicationsource,replicationdestination"
          LABEL: "app.kubernetes.io/name={{.APP}},app.kubernetes.io/instance={{.APP}}"
          NS: "{{.NS}}"

      # Delete resources by name (catches things without proper labels)
      - task: .delete
        vars:
          TYPE: "replicationsource,replicationdestination"
          APP: "{{.APP}}"
          NS: "{{.NS}}"

      # Delete restic snapshots from repository
      - task: .delete-restic-snapshots
        vars: {APP: "{{.APP}}", NS: "{{.NS}}"}

      # Delete PVCs and StatefulSets by name pattern
      - |
        echo
        echo "Deleting PVCs and StatefulSets by name pattern..."
        resources=$(kubectl get pvc,statefulset -n {{.NS}} -o name 2>/dev/null | grep -E "{{.APP}}|data-.*{{.APP}}|volsync-.*{{.APP}}" || true)
        if [ -n "$resources" ]; then
          echo "$resources" | xargs kubectl delete -n {{.NS}} --ignore-not-found=true --grace-period=0 --force=true 2>&1 | grep -v "Warning: Immediate deletion does not wait" || true
        else
          echo "No PVCs or StatefulSets found"
        fi
        echo

      # Delete secrets by name pattern (volsync, etc)
      - |
        echo "Deleting related secrets..."
        secrets=$(kubectl get secrets -n {{.NS}} -o name 2>/dev/null | grep -E "{{.APP}}|volsync-{{.APP}}" || true)
        if [ -n "$secrets" ]; then
          echo "$secrets" | xargs kubectl delete -n {{.NS}} --ignore-not-found=true --grace-period=0 --force=true 2>&1 | grep -v "Warning: Immediate deletion does not wait" || true
        else
          echo "No related secrets found"
        fi
        echo

      # Final cleanup - pods and jobs
      - task: .delete
        vars:
          TYPE: "pod,job"
          LABEL: "app.kubernetes.io/name={{.APP}},app.kubernetes.io/instance={{.APP}}"
          NS: "{{.NS}}"

      - task: .delete
        vars:
          TYPE: "kustomization"
          APP: "{{.APP}}"
          NS: "flux-system"

      - echo
      - echo "Wipe complete for {{.APP}}. To recreate, run 'task flux:apply PATH=<path>' or 'task flux:hr APP={{.APP}}'"
      - echo
    requires:
      vars: ["APP"]
    preconditions:
      - sh: "[ -n '{{.NS}}' ]"
        msg: "Could not determine namespace for app {{.APP}}"

  kustomization:
    aliases: ["ks"]
    desc: Force reconcile a kustomization record
    cmds:
      - task: .reconcile
        vars: { NS: "flux-system", TYPE: "kustomization"}
    vars:
      NS: "flux-system"
      TYPE: "kustomization"
    requires:
      vars: ["APP"]

  bootstrap:
    cmds:
      - kubectl apply --server-side --force-conflicts --kustomize {{.KUBERNETES_DIR}}/bootstrap/flux

  .reconcile:
    silent: true
    internal: true
    cmds:
      - |
        if [ "{{.TYPE}}" = "helmrelease" ]; then
          HELM_STATUS=$(helm list -n {{.NS}} --filter "^{{.APP}}$" -o json | jq -r '.[0].status // "not-found"' || echo "not-found")
          if [ "$HELM_STATUS" = "failed" ] || [ "$HELM_STATUS" = "pending-install" ] || [ "$HELM_STATUS" = "pending-upgrade" ]; then
            helm delete {{.APP}} -n {{.NS}} --no-hooks || true
            sleep 5
          fi
        fi
      - flux reconcile --namespace {{.NS}} {{.TYPE}} {{.APP}} {{if eq "helmrelease" .TYPE}}--force{{end}} {{if eq "kustomization" .TYPE}}--with-source{{end}}
    vars:
      NS:
        sh: kubectl get -A {{.TYPE}} --no-headers --field-selector=metadata.name={{.APP}} | awk '{print $1}'
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG}}

  .patch:
    internal: true
    silent: true
    cmds:
      - kubectl patch {{.TYPE}} -n {{.NS}} {{.APP}} -p '{"metadata":{"finalizers":[]}}' --type=merge 2>/dev/null || true
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG}}
      - msg: Missing APP
        sh: '[ -n "{{.APP}}" ]'

  .delete:
    internal: true
    silent: true
    cmd: |
      {{- if .LABEL }}
      # Handle comma-separated labels
      echo "{{.LABEL}}" | tr ',' '\n' | while read -r label; do
        echo "Deleting {{.TYPE}} with label: $label"
        kubectl delete --namespace {{.NS}} {{.TYPE}} -l "$label" --ignore-not-found=true --grace-period=0 --force=true 2>&1 | grep -v "Warning: Immediate deletion does not wait" || true
        echo
      done
      {{- else }}
      echo "Deleting {{.TYPE}} with name: {{.APP}}"
      kubectl delete --namespace {{.NS}} {{.TYPE}} {{.APP}} --ignore-not-found=true --grace-period=0 --force=true 2>&1 | grep -v "Warning: Immediate deletion does not wait" || true
      {{- end }}
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG}}
      - msg: Must provide either APP or LABEL
        sh: '[ -n "{{.APP}}" ] || [ -n "{{.LABEL}}" ]'

  .delete-restic-snapshots:
    internal: true
    silent: true
    cmd: bash {{.ROOT_DIR}}/.taskfiles/flux/scripts/delete-restic-snapshots.sh {{.APP}} {{.NS}}
    requires:
      vars: ["APP", "NS"]
