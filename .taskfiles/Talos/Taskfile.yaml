---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TALOS_DIR: "{{.ROOT_DIR}}/talos"
  TALHELPER_CLUSTER_DIR: "{{.ROOT_DIR}}/talos/clusterconfig"
  TALHELPER_SECRET_FILE: "{{.ROOT_DIR}}/talos/talsecret.sops.yaml"
  TALHELPER_CONFIG_FILE: "{{.ROOT_DIR}}/talos/talconfig.yaml"
  TALHELPER_ENV_FILE: "{{.ROOT_DIR}}/talos/talenv.sops.yaml"
#  HELMFILE_FILE: "{{.ROOT_DIR}}/bootstrap/helmfile.yaml"
  TALOSCONFIG_FILE: "{{.TALHELPER_CLUSTER_DIR}}/talosconfig"

#env:
#  TALOSCONFIG: "{{.TALOSCONFIG_FILE}}"

tasks:

  generate:
    desc: Generate Talos configuration files with talhelper and encrypt with sops
    dir: "{{.TALOS_DIR}}"
    cmds:
      - talhelper genconfig --config-file {{.TALHELPER_CONFIG_FILE}} --env-file "{{.TALHELPER_ENV_FILE}}" --out-dir {{.TALHELPER_CLUSTER_DIR}} --talos-mode metal --debug
    vars:
      cluster: '{{.cluster | default "stone"}}'

  apply-config:
    desc: Apply talos configuration to a node
    prompt: Apply talos configuration {{.cluster}}-{{.hostname}}.yaml to {{.address}} on cluster {{.cluster}} ... continue?
    cmd: |
      talosctl --context {{.cluster}} apply-config --mode={{.mode}} --nodes {{.address}} --file {{.TALHELPER_CLUSTER_DIR}}/{{.cluster}}-{{.hostname}}.yaml {{if .insecure}}--insecure{{end}}
    vars:
      mode: '{{.mode | default "auto"}}'
      insecure: '{{.insecure | default ""}}'
      cluster: '{{.cluster | default "stone"}}'
      address:
        sh: cat {{.TALHELPER_CLUSTER_DIR}}/{{.cluster}}-{{.hostname}}.yaml | yq '.machine.network.interfaces[0].addresses[0] | split("/")[0]'
    requires:
      vars: ["hostname"]
    preconditions:
      - test -f {{.ROOT_DIR}}/talos/clusterconfig/talosconfig
      - test -f {{.ROOT_DIR}}/talos/clusterconfig/{{.cluster}}-{{.hostname}}.yaml

  reset-node:
    desc: Reset a Talos node
    prompt: Reset Talos '{{.hostname}}' node on the '{{.cluster}}' cluster ... continue?
    cmd: talosctl --context {{.cluster}} reset --nodes {{.hostname}} --graceful=false
    requires:
      vars: ["cluster", "hostname"]
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/bootstrap/talos/clusterconfig/talosconfig
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1
      - talosctl --context {{.cluster}} --nodes {{.hostname}} get machineconfig >/dev/null 2>&1

  upgrade:
    desc: Upgrade Talos on a node
    dir: "{{.ROOT_DIR}}/talos/"
    cmds:
      - talosctl --nodes {{.node}} upgrade --image {{.image}} --wait=true --timeout=10m --preserve=true --reboot-mode={{.mode}}
      - talosctl --nodes {{.node}} health --wait-timeout=10m --server=false
    vars:
      mode: '{{.mode | default "default"}}'
    requires:
      vars: ["node", "image"]
    preconditions:
      - msg: Missing talosconfig
        sh: test -f {{.TALOSCONFIG_FILE}}
      - msg: Unable to retrieve Talos config
        sh: talosctl config info >/dev/null 2>&1
      - msg: Node not found
        sh: talosctl --nodes {{.node}} get machineconfig >/dev/null 2>&1

  upgrade-k8s:
    desc: Upgrade Kubernetes across the cluster
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    cmd: talosctl --nodes {{.controller}} upgrade-k8s --to {{.to}}
    requires:
      vars: ["controller", "to"]
    preconditions:
      - msg: Missing talosconfig
        sh: test -f {{.TALOSCONFIG_FILE}}
      - msg: Unable to retrieve Talos config
        sh: talosctl config info >/dev/null 2>&1
      - msg: Node not found
        sh: talosctl --nodes {{.controller}} get machineconfig >/dev/null 2>&1
