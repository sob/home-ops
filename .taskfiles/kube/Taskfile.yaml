---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  KUBECONFORM_SCRIPT: "{{.ROOT_DIR}}/.github/scripts/kubeconform.sh"

tasks:

  restore-age-key:
    desc: restore the age.key file from onepassword
    cmds:
      - grep -qxF 'age.key' {{.ROOT_DIR}}/.gitignore || echo 'age.key' >> {{.ROOT_DIR}}/.gitignore
      - op inject -i {{.ROOT_DIR}}/.taskfiles/kubernetes/resources/age.key.tmpl -o {{.ROOT_DIR}}/age.key

  node-shell:
    desc: open a shell to a node [NODE=required]
    interactive: true
    cmd: kubectl node-shell -n kube-system -x {{.NODE}}
    requires:
      vars: [NODE]
    preconditions:
      - kubectl get nodes {{.NODE}}
      - kubectl node-shell --version
      - which kubectl

  resources:
    desc: Gather common resources in your cluster, useful when asking for support
    cmds:
      - for: { var: resource }
        cmd: kubectl get {{.ITEM}} {{.CLI_ARGS | default "-A"}}
    vars:
      resource: >-
        nodes
        gitrepositories
        kustomizations
        helmrepositories
        helmreleases
        certificates
        certificaterequests
        ingresses
        pods

  kubeconform:
    desc: Validate Kubernetes manifests with kubeconform
    cmd: bash {{.KUBECONFORM_SCRIPT}} {{.KUBERNETES_DIR}} --ignore
    preconditions:
      - msg: Missing kubeconform script
        sh: test -f {{.KUBECONFORM_SCRIPT}}

  mount:
    desc: Mount a PVC to a temporary pod for a cluster
    summary: |
      args:
        cluster: cluster to run command against (default: admin@stone)
        ns: namespace the pvc is in (default: default)
        claim: pvc to mount (required)
    interactive: true
    cmd: |
      kubectl --context {{.cluster}} run -n {{.ns}} debug-{{.claim}} -i --tty --rm --image=null --privileged --overrides='
        {
          "apiVersion": "v1",
          "spec": {
            "containers": [
              {
                "name": "debug",
                "image": "docker.io/library/alpine:3.20.2",
                "command": ["/bin/sh"],
                "stdin": true,
                "stdinOnce": true,
                "tty": true,
                "volumeMounts": [
                  {
                    "name": "config",
                    "mountPath": "/config"
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "config",
                "persistentVolumeClaim": {
                  "claimName": "{{.claim}}"
                }
              }
            ],
            "restartPolicy": "Never"
          }
        }'
    requires:
      vars: ["claim"]
    vars:
      ns: '{{.ns | default "default"}}'
      cluster: '{{.cluster | default "admin@stone"}}'
    preconditions:
      - sh: "kubectl -n {{.ns}} get persistentvolumeclaims {{.claim}}"
        msg: "PVC not found"
